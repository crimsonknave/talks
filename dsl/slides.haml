%section
  %img.stretch(style='border:none' src='images/title.png')
%section
  %h3 Disclaimer
  This is not a talk about how to write a real DSL (read: actual language spec ala HTML/Regex), instead it's a talk about how to write language specific to your domain.
%section
  %section
    %h1 Types
    %ul
      %li Config Blocks
      %li class keywords
      %li other blocks
  %section
    %h1 config blocks
    %pre
      %code.ruby
        :preserve
          MyGem.configure do |config|
            config.be_awesome
            config.thingy = 'I am a thing'
          end
  %section
    %h1 class keywords
    %pre
      %code.ruby
        :preserve
          class Model &lt; ActiveRecord::Model
            has_many :things
            belongs_to :owner
          end
  %section
    %h1 other blocks
    %pre
      %code.ruby
        :preserve
          # Sinatra
          get '/hi' do
            "Hello World!"
          end
%section
  %section
    %h1 how
  %section
    %h1 meta-fin-programming
    %span.fragment Metaprogramming is the most important piece of writing some language specific code. Heavy use of define method lets you create methods on the fly based on how your code is used.
  %section
    %h2 class methods
    By using class methods you can define what appear to be keywords.
  %section
    %h2 Optional Parameters
    If you want your 'dsl' to look more 'natural' then consider using optional prams instead of an equal sign.
    %pre
      %code.ruby
        :preserve
          Car.config do
            color 'blue'
            year 2015
          end
  %section
    %h2 Before and After
    A common pattern to manage lifecycle states is to have allow for before and after blocks. These blocks allow for greater control if you need to cleanup something but need it to be done outside of the normal window.
%section
  %section
    %h1 Examples
  %section
    %h3 Cot
    %h5 Property
    %pre
      %code.ruby
        :preserve
          class WrappedObject &lt; Cot::Frame
            property :id
            property :name, searchable: true
            proprety :company_name, from: :companyName
            property :item do
              from :itemValue
              value do |params|
                NestedClass.new params.merge parent_id: id
              end
            end
            property :blank do
              missing do
                "Item &#35;{id}"
              end
            end
          end
  %section
    %h3 Cot
    %h5 Property definition
    %pre
      %code.ruby
        :preserve
          def self.property(name, args = {}, &block)
            prop = Property.new args
            prop.instance_eval(&block) if block

            set_blocks(name, prop)
            set_mappings(name, prop)
            @primary_key = name if prop.primary?

            define_method name do
              self[name]
            end
            define_method "&#35;{name}=" do |value|
              self[name] = value
            end
            define_attribute_method name
          end
  %section
    %h3 Cot
    %h5 Property class
    %pre
      %code.ruby
        :preserve
          module Cot
            class Property
              attr_accessor :args
              def initialize(params = {})
                @args = params
              end

              [:missing, :value].each do |method_name|
                define_method method_name do |&block|
                  return args[method_name] unless block
                  args[method_name] = block
                end
              end
            end
          end
  %section
    %h3 Jenkins Pipeline Builder
    %h5 Adding a new builder
    %pre
      %code.ruby
        :preserve
          builder do
            name :shell_command
            plugin_id 'builtin'
            description 'Lets you run shell commands as a build step.'
            jenkins_name 'Execute shell'
            announced false

            xml do |param|
              send('hudson.tasks.Shell') do
                command param
              end
            end
          end
  %section
    %h3 Jenkins Pipeline Builder
    %h5 Extensions definition
    %pre
      %code.ruby
        :preserve
          [:builder, :trigger, :publisher].each do |type, path|
            define_method type do |&block|
              set = JenkinsPipelineBuilder::ExtensionSet.new
              set.instance_eval(&block)
              set.blocks.each do |version, settings|
                set.add_extension type, version, settings, path
              end
              unless set.valid?
                set.report_invalid_status
                return false
              end
              versions = set.extensions.map(&:min_version)
              puts "Successfully registered &#35;{set.name} for versions &#35;{versions}" if set.announced
            end
          end
  %section
    %h3 Campaign Service Gem
    %h5 Initialization
    %pre
      %code.ruby
        :preserve
          CampaignService.configure do |config|
            config.log = Logging.logger["API::CampaignService"]
            config.base_url = "https://campaignapi#&#123;APP_CONFIG['url_prefix']}roving.com/campaignapi"
            config.cyberark_config = APP_CONFIG['cyberark']
            config.username = APP_CONFIG['cyberark']['app_name']
            config.set_password_via_cyberark
          end
  %section
    %h3 Campaign Service Gem
    %h5 Config Block
    %pre
      %code.ruby
        :preserve
          module CampaignService
            class &lt;&lt; self
              def configure
                yield(conf)
                conf.set_client
                conf
              end

              def conf
                @_configuration || Configuration.new
              end
            end
          end
%section
  %pre
    %code.ruby
      :preserve
        talk do
          after do |questions|
            yield questions
          end
        end
